install.packages("KernSmooth")
load(KernSmooth)
library(KernSmooth)
find.package("devtools")
install.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
library(datasets)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$hp, mtcars$cyl), mean)
x<-sapply(split(mtcars$hp, mtcars$cyl), mean)
x[3]-x[1]
library(datasets)
data(iris)
?iris
x<-meancolumn(iris)
colMeans(iris)
colMeans(iris$'Sepal.Length)
c
aa
)
''
srop
stop
stop()
q
'
colMeans(iris$Sepal.Length)
iris$Sepal.Length
sapply(split(iris$Species, iris$Sepal.Length), mean)
sapply(split(iris$Sepal.Length,iris$Species), mean)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
t<-xyplot(weight ~ Time | Diet, BodyWeight)
str(t)
type(t)
typeof(t)
?xyplot
?print.trellis
?par
?splom
?trellis.par.set
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
?geom
?qplot
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
library(swirl)
install_course_zip(""D:\Users\max\Downloads\Compressed\swirl_courses-master.zip"", multi=TRUE)
install_course_zip("D:\Users\max\Downloads\Compressed\swirl_courses-master.zip", multi=TRUE)
install_course_zip("D:/Users/max/Downloads/Compressed/swirl_courses-master.zip", multi=TRUE)
swirl()
33/36
deck
1/52
52
4/52
0
3/13
2/21
2/51
exit
?swirl
bye()
swirl()
nxt()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
0.8*1.6/2
64
64/100
mypdf
?integrate
integrate(mypdf,0,1.6)
sqrt(2)
99.7*0.001
99.7/100*0.001
0.15*99.999
0.3/100*99.999
(100-99.7)/100*(100-0.001)
(100-98.5)/100*(100-0.001)
(100-98.5)*(100-0.001)
(100-98.5)*(100-0.001)/100
prevalence = 0.001
prevalence <- 0.001
prevalence
specificity<-98.5/100
(1-prevalence) * (1-specificity)
0.000997/(0.000997+0.014985)
swirl()
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
(X_hi+X_lo)/2
(edh+edl)/2
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,mean)
apply(allsam,FUN=mean)
apply(allsam,1,FUN=mean)
mean(smeans)
dice_sqr
dice_fair
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair
ex2_fair-3.5^2
sum(dice_high * dice_sqr)-3.5^2
sum(dice_high * dice_sqr)-edh^2
swirl()
library("swirl")
swirl()
install.packages("ggplot")
install.packages("ggplot2")
swirl()
install.packages("Rccp")
install.packages("Rcpp")
swirl()
install.packages("colorspace")
swirl()
dice_sqr
ex2_fair <- dice_sqr * dice_fair
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fair
ex2_fair - 3.5^2
sum(dice_high * dice_sqr) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
choose(5,3) * 0.8^2 * 0.2^3
choose(5,3) * 0.8^2 * 0.2^3 + choose(5,4) * 0.8^1 * 0.2^4 + choose(5,5) * 0.8^0 * 0.2^5
choose(5,3) * 0.8^3 * 0.2^2 + choose(5,4) * 0.8^4 * 0.2^1 + choose(5,5) * 0.8^5 * 0.2^0
pbinom(2,5,0.8)
1-pbinom(2,size=5,prob=0.8)
pbinom(2,size=5,prob=.8,lower.tail=FALSE)
qnorm(0.1)
0
3
qnorm(.975,mean=3,sd=2)
3+1.96*2
pnorm(1200,mean=1020,sd=50,lower.tail = false)
pnorm(1200,mean=1020,sd=50,lower.tail = "false")
pnorm(1200,mean=1020,sd=50,lower.tail=FALSE)
pnorm(180/50,lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(0.75,mean=1020,sd=50,lower.tail=TRUE)
0.53
0.53
ppois(3,mean=2.5*4)
ppois(3,2.5*4)
pbinom(5,1000,0.01)
ppois(5,1000*0.01)
coinPlot(10)
coinPlot(10000)
qnorm(0.95)
p''+c(-1,1)* qnorm(.975)*sqrt(p'(1-p')/100)
0.6+c(-1,1)* qnorm(.975)*sqrt(0.6'(1-0.6)/100)
)
)
)
]
=
,
v
stop
q
]
na
NA
install.packages("R.utils")
help
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb<-5/94.32
mean + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
mean + c(-1,1)*qnorm(.975)*sqrt(lamb\94.32)
lambda + c(-1,1)*qnorm(.975)*sqrt(lamb\94.32)
lambda_hat + c(-1,1)*qnorm(.975)*sqrt(lamb\94.32)
?
a
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb\94.32)
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
setwd("D:/Studies/Statistical Inference")
set.seed(123)
lamda=0.2
n=40
sim=1000
data <- replicate(sim, rexp(n, lamda))
means <- apply(data, 2, mean)
mean(means[,1])
mean(means)
1\lamda
hist(means,breaks=n,prob=T,col="blue",xlab = "means",main="Density of means",ylab="density")
hist(means,prob=T,col="blue",xlab = "means",main="Density of means",ylab="density")
hist(means,breaks=n,prob=T,col="blue",xlab = "means",main="Density of means",ylab="density")
hist(means,prob=T,col="blue",xlab = "means",main="Density of means",ylab="density")
hist(means,prob=T,col="blue")
hist(means,breaks=n,prob=T,col="blue")
hist(means,breaks=n,col="blue")
hist(means,breaks=n)
x <- seq(min(means), max(means), length=100)
y <- dnorm(x, mean=norm_mean, sd=norm_sd))
y <- dnorm(x, mean=norm_mean, sd=norm_sd)
norm_mean<-1/lamda
norm_mean
norm_sd<-(1/lamda)/sqrt(n)
norm_sd
y <- dnorm(x, mean=norm_mean, sd=norm_sd)
curve(x,y, type="l", lwd=1, add=TRUE)
lines(x, y, lwd=2, col="red")
lines(x, y, lwd=5, col="red")
lines(x, y, lwd=2, col="red")
lines(x, y, pch=22, lwd=2, col="red")
data(ToothGrowth)
head(ToothGrowth)
nrows(ToothGrowth)
nrow(ToothGrowth)
str(ToothGrowth)
boxplot(len ~ supp + dose, data=ToothGrowth, ylab="Tooth Length", main="Boxplot of Tooth Growth Data")
boxplot(len ~ supp * dose, data=ToothGrowth, ylab="Tooth Length", main="Boxplot of Tooth Growth Data")
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
boxplot(len ~ supp + dose, data=ToothGrowth, ylab="Tooth Length", main="Boxplot of Tooth Growth Data")
boxplot(len ~ dose, data=ToothGrowth, ylab="Tooth Length", main="Boxplot of Tooth Growth Data")
ToothGrowth_oj <- ToothGrowth[ToothGrowth$supp=="OJ",]
ToothGrowth_vc <- ToothGrowth[ToothGrowth$supp=="VC",]
ToothGrowth_oj <- ToothGrowth[ToothGrowth$supp=="OJ",c(0,2)]
ToothGrowth_oj <- ToothGrowth[ToothGrowth$supp=="OJ",c(1,3)]
ToothGrowth_vc <- ToothGrowth[ToothGrowth$supp=="VC",c(1,3)]
oj_plot<-boxplot(len ~ dose, data=ToothGrowth_oj, ylab="Tooth Length", main="Tooth Growth Data with OJ")
vc_plot<-boxplot(len ~ dose, data=ToothGrowth_vc, ylab="Tooth Length", main="Tooth Growth Data with VC")
grid.arrange(oj_plot, vc_plot, ncol = 2)
load("extra.grid")
library("extra.grid")
library(gridExtra)
install.packages("gridExtra")
install.packages("gridExtra")
oj_plot<-boxplot(len ~ dose, data=ToothGrowth_oj, ylab="Tooth Length", main="Tooth Growth Data with OJ")
vc_plot<-boxplot(len ~ dose, data=ToothGrowth_vc, ylab="Tooth Length", main="Tooth Growth Data with VC")
grid.arrange(oj_plot, vc_plot, ncol = 2)
boxplot(len ~ dose, data=ToothGrowth_oj, ylab="Tooth Length", main="Tooth Growth Data with OJ")
boxplot(len ~ dose, data=ToothGrowth_vc, ylab="Tooth Length", main="Tooth Growth Data with VC")
boxplot(len ~ dose, data=ToothGrowth_oj, ylab="Tooth Length", main="Tooth Growth Data with OJ",notch=TRUE)
boxplot(len~supp*dose, data=ToothGrowth, notch=TRUE,
col=(c("gold","darkgreen")),
main="Tooth Growth", xlab="Suppliment and Dose")
boxplot(len~supp*dose, data=ToothGrowth,
col=(c("gold","darkgreen")),
main="Tooth Growth", xlab="Suppliment and Dose")
aggregate(len, list(supp, dose), mean)
aggregate(ToothGrowth, list(supp, dose), mean)
aggregate(ToothGrowth, list(ToothGrowth$supp, ToothGrowth$dose), mean)
aggregate(ToothGrowth, list(factor(ToothGrowth$supp), ToothGrowth$dose), mean)
aggregate(ToothGrowth, list(factor(ToothGrowth$supp), factor(ToothGrowth$dose)), mean)
aggregate(ToothGrowth$len, list(factor(ToothGrowth$supp), factor(ToothGrowth$dose)), mean)
aggregate(ToothGrowth$len, list(ToothGrowth$supp,ToothGrowth$dose), mean)
mean_by_type<-aggregate(ToothGrowth$len, list(ToothGrowth$supp,ToothGrowth$dose), mean)
sd_by_type<-aggregate(ToothGrowth$len, list(ToothGrowth$supp,ToothGrowth$dose), sd)
plot(mean_by_type)
mean_by_type
hist(mean_by_type)
plot(mean_by_type$x, col=mean_by_type$Group.1+mean_by_type$Group.2)
plot(mean_by_type$x, col=c(mean_by_type$Group.1,mean_by_type$Group.2))
hist(x~Group.1*Group.2, data=mean_by_type,col=(c("blue","red")),main="Tooth Growth", xlab="Suppliment and Dose")
names(mean_by_type)<-c(supp,dose,len)
names(mean_by_type)<-c("supp","dose","len")
mean_by_type
names(mean_by_type)<-c("supp","dose","len_mean")
hist(len_mean~supp*dose, data=mean_by_type,col=(c("blue","red")),main="Tooth Growth", xlab="Suppliment and Dose")
hist(len_mean~supp+dose, data=mean_by_type,col=(c("blue","red")),main="Tooth Growth", xlab="Suppliment and Dose")
interaction.plot(ToothGrowth$dose, ToothGrowth$supp, ToothGrowth$len)
interaction.plot(len_mean$dose, len_mean$supp, len_mean$len_mean)
interaction.plot(mean_by_type$dose, mean_by_type$supp, mean_by_type$len_mean)
interaction.plot(ToothGrowth$dose, ToothGrowth$supp, ToothGrowth$len)
interaction.plot(mean_by_type$dose, mean_by_type$supp, mean_by_type$len_mean)
qplot(dose, supp, data = mean_by_type)
qplot(len, supp, data = mean_by_type)
qplot(len_mean, supp, data = mean_by_type)
qplot(len_mean, supp+dose, data = mean_by_type)
qplot(len_mean, supp, data = mean_by_type)
qplot(supp,len_mean, data = mean_by_type)
qplot(supp,len_mean, data = mean_by_type,color = dose)
qplot(dose,len_mean, data = mean_by_type,color = supp)
by_supp <- qplot(supp,len_mean, data = mean_by_type,color = dose)
by_dose<- qplot(dose,len_mean, data = mean_by_type,color = supp)
grid.arrange(by_supp, by_dose, ncol = 2)
?qplot
?grid.arrange
mean_by_type
mean_by_type[2]
mean_by_type[,2]
mean_by_type[2,]
for(i in nrow(mean_by_type)){
sup_type <- "Vitamin C"
if(mean_by_type[i,1]=="OJ")
{
sup_type <- "Orange juice"
}
print(paste("For suupliment of type ", sup_type, " and for dosage of ", mean_by_type[i,2], " the 95% confidence interval of the means is : ",mean_by_type[i,3] + c(-1,1) * qnorm(0.975) * sd_by_type[i,3                                                                                                                                                                                   ]/sqrt(10)))
}
nrow(mean_by_type)
for(i in nrow(mean_by_type)){
sup_type <- "Vitamin C"
if(mean_by_type[i,1]=="OJ")
{
sup_type <- "Orange juice"
}
print(paste("For suupliment of type", sup_type, "and for dosage of", mean_by_type[i,2], "the 95% confidence interval of the means is :",mean_by_type[i,3] + c(-1,1) * qnorm(0.975) * sd_by_type[i,3]/sqrt(10)))
}
conf_interval <- mean_by_type[i,3] + c(-1,1) * qnorm(0.975) * sd_by_type[i,3]/sqrt(10)
i
print(paste("For suppliment of type", sup_type, "and for dosage of", mean_by_type[i,2], "the 95% confidence interval of the means is :",conf_interval))
conf_interval
conf_interval <- paste(mean_by_type[i,3] + c(-1,1) * qnorm(0.975) * sd_by_type[i,3]/sqrt(10))
print(paste("For suppliment of type", sup_type, "and for dosage of", mean_by_type[i,2], "the 95% confidence interval of the means is :",conf_interval))
n_by_type<-aggregate(ToothGrowth$len, list(ToothGrowth$supp,ToothGrowth$dose), count)
n_by_type<-aggregate(1, list(ToothGrowth$supp,ToothGrowth$dose), sum)
n_by_type<-aggregate(ToothGrowth$len, list(ToothGrowth$supp,ToothGrowth$dose), length)
n_by_type
for(i in 1:nrow(mean_by_type)){
sup_type <- "Vitamin C"
if(mean_by_type[i,1]=="OJ")
{
sup_type <- "Orange juice"
}
conf_interval <- paste(mean_by_type[i,3] + c(-1,1) * qnorm(0.975) * sd_by_type[i,3]/sqrt(n_by_type[i,3]))
print(paste("For suppliment of type", sup_type, "and for dosage of", mean_by_type[i,2], "the 95% confidence interval of the means is :",conf_interval))
}
for(i in 1:nrow(mean_by_type)){
sup_type <- "Vitamin C"
if(mean_by_type[i,1]=="OJ")
{
sup_type <- "Orange juice"
}
conf_interval <- paste(mean_by_type[i,3] + c(-1,1) * qnorm(0.975) * sd_by_type[i,3]/sqrt(n_by_type[i,3]))
print(paste("For suppliment of type", sup_type, "and for dosage of", mean_by_type[i,2], "the 95% confidence interval of the means is :"))
print(conf_interval)
}
options(rpubs.upload.method = "internal")
options(RCurlOptions = list(verbose = FALSE, capath = system.file("CurlSSL", "cacert.pem", package = "RCurl"), ssl.verifypeer = FALSE))
