import gmpy2
import math

N1 = 179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581
N2 = 648455842808071669662824265346772278726343720706976263060439070378797308618081116462714015276061417569195587321840254520655424906719892428844841839353281972988531310511738648965962582821502504990264452100885281673303711142296421027840289307657458645233683357077834689715838646088239640236866252211790085787877

def factorize(N,ran):
    for i in ran:
        A = gmpy2.add(gmpy2.isqrt(N),i)
        Asq = gmpy2.mul(A,A)
        diff = gmpy2.sub(Asq, N)
        x = gmpy2.isqrt_rem(diff)[0]
        [correct,p,q] = verify(A,x,N)
        if(correct):
            print p
            return [p,q]
    print "Not Found"

def verify(A,x,N):
    p = gmpy2.sub(A,x)
    q = gmpy2.add(A,x)
    if gmpy2.mul(p, q) == N:
        return [True,p,q]
    else:
        return [False,p,q]

def q3():
    n = gmpy2.mpz('72006226374735042527956443552558373833808445147399984182665305798191' +
            '63556901883377904234086641876639384851752649940178970835240791356868' +
            '77441155132015188279331812309091996246361896836573643119174094961348' +
            '52463970788523879939683923036467667022162701835329944324119217381272' +
            '9276147530748597302192751375739387929')
    
    a_ = gmpy2.isqrt(n * 24) + 1
    
    d = (a_**2) - 24*n

    assert d > 0

    p = (a_ - gmpy2.isqrt(d)) / 6

    return min(p, n/p)

def q4(p,q,n):
    c = gmpy2.mpz('22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256' +
            '46583996794288946076454204058156474898801373486412045232522932017648791666640299750918872997169052608322206777160001932' +
            '9260870009579993724077458967773697817571267229951148662959627934791540')

    e = gmpy2.mpz(65537)

    fi = gmpy2.mul(gmpy2.sub(p,1) , gmpy2.sub(q,1))

    d = gmpy2.invert(e, fi)

    r = gmpy2.powmod(c, d, n)
    
    m = gmpy2.digits(r, 16).split('00')[1]
    
    return m.decode('hex')

[p,q] = factorize(N1,range (1, 2))
factorize(N2,range (1, 2**20))
print q3()
print q4(p,q,N1)
