install.packages("KernSmooth")
load(KernSmooth)
library(KernSmooth)
find.package("devtools")
install.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
library(datasets)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$hp, mtcars$cyl), mean)
x<-sapply(split(mtcars$hp, mtcars$cyl), mean)
x[3]-x[1]
library(datasets)
data(iris)
?iris
x<-meancolumn(iris)
colMeans(iris)
colMeans(iris$'Sepal.Length)
c
aa
)
''
srop
stop
stop()
q
'
colMeans(iris$Sepal.Length)
iris$Sepal.Length
sapply(split(iris$Species, iris$Sepal.Length), mean)
sapply(split(iris$Sepal.Length,iris$Species), mean)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
t<-xyplot(weight ~ Time | Diet, BodyWeight)
str(t)
type(t)
typeof(t)
?xyplot
?print.trellis
?par
?splom
?trellis.par.set
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
?geom
?qplot
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
setwd("D:/Studies/Reproducible Research/Ex1")
}
library(ggplot2)
if(!file.exists("./repdata-data-activity.zip")){
}
if(!file.exists("./repdata-data-activity.zip")){
print("Downloading and unzipping dataset...")
download.file("https://github.com/maximbu/RepData_PeerAssessment1/blob/master/activity.zip?raw=true","./repdata-data-activity.zip")
}
unzip("./repdata-data-activity.zip")
print("Completed.")
print("Loading Data...")
unzip("./repdata-data-activity.zip")
print("Completed.")
print("Loading Data...")
unzip("repdata-data-activity.zip")
print("Completed.")
print("Loading Data...")
}
}
activity <- read.csv("activity.csv")
if(!file.exists("./activity.csv")){
print("Downloading data")
download.file("https://github.com/maximbu/RepData_PeerAssessment1/blob/master/activity.zip?raw=true","repdata-data-activity.zip")
print("Unzipping data")
unzip("repdata-data-activity.zip")
print("Done")
}
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip","repdata-data-activity.zip")
head(activity)
head(data)
```
mean_steps_per_interval<- aggregate(steps ~ interval, data, FUN=mean, na.rm = TRUE)
if(!file.exists("./activity.csv")){
print("Downloading data")
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip","repdata-data-activity.zip")
print("Unzipping data")
unzip("repdata-data-activity.zip")
print("Done")
}
print("Loading Data")
data <- read.csv("activity.csv",colClasses = c("numeric", "Date", "numeric"))
print("Loaded")
mean_steps_per_interval <- aggregate(steps ~ interval, data, FUN=mean, na.rm = TRUE)
median_steps_per_interval <- aggregate(steps ~ interval, data, FUN=median, na.rm = TRUE)
nas <- is.na(activity$steps)
fulldata<-data
colnames(fulldata) <- colnames(fulldata)+c("imputed_mean","imputed_median")
head(fulldata)
head(data)
colnames(fulldata) <- colnames(fulldata),c("imputed_mean","imputed_median")
head(fulldata)
head(data)
colnames(fulldata) <- c(colnames(fulldata),"imputed_mean","imputed_median")
type(data)
cbind(data,imputed_mean=0)
head(fulldata)
head(data)
fulldata<-cbind(data,imputed_mean=0)
head(fulldata)
head(data)
mean_steps_per_interval <- aggregate(steps ~ interval, data, FUN=mean, na.rm = TRUE)
median_steps_per_interval <- aggregate(steps ~ interval, data, FUN=median, na.rm = TRUE)
nas <- is.na(activity$steps)
fulldata<-cbind(data,imputed_mean=data$steps,imputed_median=data$steps)
head(fulldata)
head(data)
tail(fulldata)
head(data)
tail(fulldata)
fulldata
mean_steps_per_interval <- aggregate(steps ~ interval, data, FUN=mean, na.rm = TRUE)
median_steps_per_interval <- aggregate(steps ~ interval, data, FUN=median, na.rm = TRUE)
nas <- is.na(data$steps)
fulldata<-cbind(data,imputed_mean=data$steps,imputed_median=data$steps)
mean_steps_per_interval
head(mean_steps_per_interval)
mean <- filter(mean_steps_per_interval, interval==fulldata[1,]$interval)
?filter
mean<-mean_steps_per_interval$interval[which(fulldata[1,]$interval)]
?which
mean<-mean_steps_per_interval$interval[which(interval==fulldata[1,]$interval)]
mean<-mean_steps_per_interval$interval[which(mean_steps_per_interval$interva==fulldata[1,]$interval)]
mean
```{r}
mean_steps_per_interval <- aggregate(steps ~ interval, data, FUN=mean, na.rm = TRUE)
median_steps_per_interval <- aggregate(steps ~ interval, data, FUN=median, na.rm = TRUE)
nas <- is.na(data$steps)
fulldata<-cbind(data,imputed_mean=data$steps,imputed_median=data$steps)
for (i in 1:nrow(fulldata)) {
if (is.na(fulldata[i,]$steps))
{
mean_steps<-mean_steps_per_interval$steps[which(mean_steps_per_interval$interva==fulldata[i,]$interval)]
median_steps<-median_steps_per_interval$steps[which(median_steps_per_interval$interva==fulldata[i,]$interval)]
fulldata[i,]$imputed_mean <- round(mean_steps,digits=0)
fulldata[i,]$imputed_median <- median_steps
}
}
fulldata[520:540,]
fulldata[5620:5640,]
get_day_type <- function(date) {
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday")) {
"weekend"
} else {
"weekday"
}
}
fulldata$day_type <- as.factor(sapply(fulldata$date, get_day_type))
head(fulldata)
tail(fulldata)
get_day_type <- function(date) {
type <- "weekday"
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday"))    {
type<- "weekend"
}
type
}
fulldata$day_type <- as.factor(sapply(fulldata$date, get_day_type))
tail(fulldata)
get_day_type <- function(date) {
type <- "weekday"
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday"))
type<- "weekend"
type
}
fulldata$day_type <- as.factor(sapply(fulldata$date, get_day_type))
data_by_day_type<- aggregate(steps ~ day_type  + interval , data = fulldata, mean)
data_by_day_type<- aggregate(steps ~ day_type  + interval , data = fulldata, FUN=mean)
data_by_day_type<- aggregate(steps ~ day_type  + interval , data = fulldata, FUN=mean)
data_by_day_type<- aggregate(steps ~ day_type  + interval , fulldata, FUN=mean)
