install.packages("KernSmooth")
load(KernSmooth)
library(KernSmooth)
find.package("devtools")
install.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
library(datasets)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$hp, mtcars$cyl), mean)
x<-sapply(split(mtcars$hp, mtcars$cyl), mean)
x[3]-x[1]
library(datasets)
data(iris)
?iris
x<-meancolumn(iris)
colMeans(iris)
colMeans(iris$'Sepal.Length)
c
aa
)
''
srop
stop
stop()
q
'
colMeans(iris$Sepal.Length)
iris$Sepal.Length
sapply(split(iris$Species, iris$Sepal.Length), mean)
sapply(split(iris$Sepal.Length,iris$Species), mean)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
t<-xyplot(weight ~ Time | Diet, BodyWeight)
str(t)
type(t)
typeof(t)
?xyplot
?print.trellis
?par
?splom
?trellis.par.set
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
?geom
?qplot
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
library(swirl)
install_course_zip(""D:\Users\max\Downloads\Compressed\swirl_courses-master.zip"", multi=TRUE)
install_course_zip("D:\Users\max\Downloads\Compressed\swirl_courses-master.zip", multi=TRUE)
install_course_zip("D:/Users/max/Downloads/Compressed/swirl_courses-master.zip", multi=TRUE)
swirl()
33/36
deck
1/52
52
4/52
0
3/13
2/21
2/51
exit
?swirl
bye()
swirl()
nxt()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
0.8*1.6/2
64
64/100
mypdf
?integrate
integrate(mypdf,0,1.6)
sqrt(2)
99.7*0.001
99.7/100*0.001
0.15*99.999
0.3/100*99.999
(100-99.7)/100*(100-0.001)
(100-98.5)/100*(100-0.001)
(100-98.5)*(100-0.001)
(100-98.5)*(100-0.001)/100
prevalence = 0.001
prevalence <- 0.001
prevalence
specificity<-98.5/100
(1-prevalence) * (1-specificity)
0.000997/(0.000997+0.014985)
swirl()
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
(X_hi+X_lo)/2
(edh+edl)/2
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,mean)
apply(allsam,FUN=mean)
apply(allsam,1,FUN=mean)
mean(smeans)
dice_sqr
dice_fair
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair
ex2_fair-3.5^2
sum(dice_high * dice_sqr)-3.5^2
sum(dice_high * dice_sqr)-edh^2
install.packages(c("BH", "boot", "class", "cluster", "codetools", "colorspace", "devtools", "digest", "dplyr", "foreign", "Formula", "Hmisc", "httr", "KernSmooth", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "Rcpp", "RCurl", "rpart", "rstudioapi", "spatial", "survival"))
install.packages("survival")
install.packages("knitr")
setwd("D:/Studies/Reproducible Research/Ex2")
install.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
install_from_swirl("Statistical Inference")
install_from_swirl("Statistical Inference")
